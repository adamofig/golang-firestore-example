package main

import (
	"github.com/gin-gonic/gin"

	"dataclouder/internal/firestore"
	"dataclouder/internal/logger"
	http "net/http" // Tip: es mejor si le doy un alias asi siempre sabe donde lo uso

	// sin embargo si el default es que todas las carpetas se llaman como su paquete puedo saber por el nombre de la carpeta

	"github.com/gin-contrib/cors"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "dataclouder/docs" // docs is generated by Swag CLI, you have to import it.
)

// @title Adamo API

func main() {
	router := gin.Default()
	router.Use(cors.Default())
	router.Static("/static", "./static")
	router.StaticFile("/", "static/index.html")

	initializeRoutes(router)

	url := ginSwagger.URL("http://localhost:8080/swagger/doc.json") // The url pointing to API definition
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

	router.Run(":8080")
}

func initializeRoutes(router *gin.Engine) {
	logger.Primary("Iniciando Las rutas")
	router.GET("/firestore", func(ctx *gin.Context) {
		html := `
		<h3> Bienvenido a la Api de Go Buhoh AI 2 </h3>
		<h4> Consulta Entidades  <a href="/firestore/collection"> /firestore/collection </a> </h4>
		<h4> Configuraciones /config</h4>`
		ctx.Data(200, "text/html; charset=utf-8", []byte(html))
	})

	router.GET("/firestore/collection/:name", GetCollection)
	router.POST("/firestore/collection/:name", SaveDocument)
	router.DELETE("/firestore/collection/:name/:id", deleteDocument)
	// router.POST("/dialogflow/", webhook)

}

func deleteDocument(ctx *gin.Context) {
	name := ctx.Param("name")
	id := ctx.Param("id")

	firestore.DeleteDoc(name, id)
	ctx.JSON(200, map[string]interface{}{"ok": "ok"})
}

// GetCollection comentario general
// @Summary Retrieves a collection on given Name
// @Produce json
// @Param name path string true "User ID"
// @Success 200 {object} entity.Account
// @Router /firestore/collection/{name} [get]
func GetCollection(ctx *gin.Context) {
	name := ctx.Param("name")
	logger.Info("Buscando las entidades de", name)
	collection, _ := firestore.GetAllDocsInCollection(name)
	logger.Info("Se tienen", len(collection), "documentos")
	ctx.JSON(200, collection)
}

// SaveDocument comentario general
// @Summary Add a document
// @Description add by json account
// @Tags firebase
// @Accept  json
// @Produce  json
// @Param name path string true "Ejemplo words"
// @Param account body entity.EmptyModel false "Add account"
// @Success 200 {object} entity.EmptyModel
// @Router /firestore/collection/{name} [post]
func SaveDocument(ctx *gin.Context) {
	name := ctx.Param("name")
	logger.Info("Se tiene el nombre ", name)

	var body map[string]interface{}
	ctx.BindJSON(&body)
	logger.DebugJson(body)
	data := firestore.AddDocWithoutID(name, body)
	ctx.JSON(http.StatusOK, data)
}
